# -*- coding: utf-8 -*-
import  psutil
import  re
import datetime
from datetime import timedelta
import sys

targetProcess=['StartStopTool']
stopToolpath=[]
targetFile=[]
wintertime='06:30:00'
summertime='05:30:00'

def get_proc(pname,list):

    for proc in psutil.process_iter():
        try:
            if proc.name().lower().__contains__(pname.lower()):
                list.append(proc.cwd())
        except psutil.AccessDenied:
            pass
        except psutil.NoSuchProcess:
            pass

def get_weekapp(txt):
    """
    正则表达式用于获取配置项中周启动的描述
    :param txt:
    :return:
    """
    reg = re.compile(r'<add key="App.*" value="(.*.exe)" />')
    return re.findall(reg, txt)

def get_dayapp(txt):
    """
    正则表达式用于获取配置项中周启动的描述
    :param txt:
    :return:
    """
    reg = re.compile(r'<add key="DayApp.*" value="(.*.exe)" />')
    return re.findall(reg, txt)

def modify_config_summer(paths):
    try:
        for path in paths:
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="App.*" value="(.*.exe)" />', i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            if split_result[1] == '1':
                                time = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                                # 如果设置时间比5:30早，则说明此时是夏令时
                                if (time-stime).days<0 :
                                    time += timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                #如果设置时间大于5:30，小于6:00,则设置时间处于夏令时
                                elif (time-stime).days==0 and (time-stime).seconds/60<30:
                                    time += timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                else:
                                    f2.write(i)
                                    continue

                            else:
                                f2.write(i)
                                continue
                        else:
                            f2.write(i)
                            continue
                    elif re.search(r'<add key="DayApp.*" value="(.*.exe)" />',i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            endtime=datetime.datetime.strptime(split_result[1], '%H:%M:%S')
                            starttime = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                            # 判断关闭时间早于夏令时时间，则说明处于夏令时设置
                            if (endtime - stime).days < 0:
                                endtime += timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                            # 判断关闭时间晚于夏令时，且在30分钟内，则处于夏令时
                            elif (endtime - stime).seconds / 60 <= 30:
                                endtime += timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')

                            # 判断启动时间早于夏令时时间，则说明处于夏令时设置
                            if (starttime - stime).days < 0:
                                starttime += timedelta(hours=1)
                                split_result[1] = starttime.strftime('%H:%M:%S')
                            # 判断启动时间晚于夏令时，且在30分钟内，则处于夏令时
                            elif (starttime - stime).seconds / 60 <= 30:
                                starttime += timedelta(hours=1)
                                split_result[1] = starttime.strftime('%H:%M:%S')

                            list_split[1] = ",".join(split_result)
                            f2.write(";".join(list_split))
                            continue
                        else:
                            f2.write(i)
                            continue
                    else:
                        f2.write(i)
                f2.close()
            print(path +" 路径下的周自启动已调整")
    except Exception as alert:
        print(alert)


def modify_config_winter(paths):
    try:
        for path in paths:
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="App.*" value="(.*.exe)" />', i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            if split_result[1] == '1':
                                time = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                                # 如果设置时间大于等于6:00，小于6：30，说明此时是冬令时，则触发修改至夏令时
                                if (time-stime).days==0 and 30 <= (time-stime).seconds/60 < 60:
                                    time -= timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                #如果设置时间大于等于6:30小于7:00,说明此时是冬令时，则触发修改至夏令时
                                elif (time-stime).days==0 and 60 <= (time-stime).seconds/60 < 90:
                                    time -= timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                else:
                                    f2.write(i)
                                    continue

                            else:
                                f2.write(i)
                                continue
                        else:
                            f2.write(i)
                            continue
                    elif re.search(r'<add key="DayApp.*" value="(.*.exe)" />',i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            endtime=datetime.datetime.strptime(split_result[1], '%H:%M:%S')
                            starttime = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                            #判断关闭时间晚于6点，早上6点半，处于冬令时
                            if (endtime-stime).days==0 and 30< (endtime-stime).seconds/60 <60:
                                endtime -= timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                            #判断关闭时间晚于6点半，早于7点，处于冬令时
                            elif (endtime-stime).days==0 and 60< (endtime-stime).seconds/60 <90:
                                endtime -= timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')

                            #判断启动时间晚于6点，早上6点半，处于冬令时
                            if (starttime-stime).days==0 and 30< (starttime-stime).seconds/60 <60:
                                starttime -= timedelta(hours=1)
                                split_result[1] = starttime.strftime('%H:%M:%S')
                            #判断启动时间晚于6点半，早于7点，处于冬令时
                            elif (starttime-stime).days==0 and 60< (starttime-stime).seconds/60 <90:
                                starttime -= timedelta(hours=1)
                                split_result[1] = starttime.strftime('%H:%M:%S')

                            list_split[1] = ",".join(split_result)
                            f2.write(";".join(list_split))
                            continue
                        else:
                            f2.write(i)
                            continue
                    else:
                        f2.write(i)
                f2.close()
            print(path +" 路径下的周自启动已调整")
    except Exception as alert:
        print(alert)



if __name__ == '__main__':
    stime = datetime.datetime.strptime(summertime, '%H:%M:%S')
    wtime = datetime.datetime.strptime(wintertime, '%H:%M:%S')
    for t in targetProcess:
        get_proc(t, stopToolpath)
    if stopToolpath:
        if sys.argv[1]=='summer':
            modify_config_summer(stopToolpath)
            print("自启动 夏令时至冬令时 调整完成")
        elif sys.argv[1]=='winter':
            modify_config_winter(stopToolpath)
            print("自启动 冬令时至夏令时 调整完成")
        else:
            print ("error:参数错误，请重新执行")



