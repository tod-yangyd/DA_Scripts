# -*- coding: utf-8 -*-
import  psutil
import  re
import datetime
import os
import time
from datetime import timedelta
import sys
import subprocess as sp

targetProcess=['StartStopTool','ZDMarketDispatcher']
#StartStopTool=[]
#ZDMarketDispatcher=[]
diction={'StartStopTool':[],'ZDMarketDispatcher':[]}
wintertime='06:30:00'
summertime='05:30:00'
def get_proc(list):
    for l in diction.keys():
        for proc in psutil.process_iter():
            try:
                if proc.name().lower().__contains__(l.lower()):
                    #if proc.name()
                    diction[l].append(proc.cwd())
            except psutil.AccessDenied:
                pass
            except psutil.NoSuchProcess:
                pass

def start_process(list):
    try:
        for l in list:
            command = l + '\StartStopTool.exe'
            sp.Popen(command, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
            print(l + " 路径下的自启动已启动")
            time.sleep(1)

    except Exception as alert:
        print(alert)


def modify_config_summer(paths):
    try:
        for path in paths:
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="App.*" value="(.*.exe)" />', i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            if split_result[1] == '1':
                                time = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                                # 如果是易盛一级，则直接修改
                                if 'EsunnyMarket' in list_split[3]:
                                    time += timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                # 如果设置时间比5:30早，则说明此时是夏令时
                                if (time-stime).days<0 :
                                    time += timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                #如果设置时间大于5:30，小于6:00,则设置时间处于夏令时
                                elif (time-stime).days==0 and (time-stime).seconds/60<30:
                                    time += timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                else:
                                    f2.write(i)
                                    continue

                            else:
                                f2.write(i)
                                continue
                        else:
                            f2.write(i)
                            continue
                    elif re.search(r'<add key="DayApp.*" value="(.*.exe)" />',i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            endtime=datetime.datetime.strptime(split_result[1], '%H:%M:%S')
                            starttime = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                            # 单独判断，如果是易盛一级，则直接修改
                            if 'EsunnyMarket' in list_split[3]:
                                endtime += timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                                starttime += timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')
                                list_split[1] = ",".join(split_result)
                                f2.write(";".join(list_split))
                                continue
                            # 判断关闭时间早于夏令时时间，则说明处于夏令时设置
                            if (endtime - stime).days < 0:
                                endtime += timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                            # 判断关闭时间晚于夏令时，且在30分钟内，则处于夏令时
                            elif (endtime - stime).seconds / 60 <= 30:
                                endtime += timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')

                            # 判断启动时间早于夏令时时间，则说明处于夏令时设置
                            if (starttime - stime).days < 0:
                                starttime += timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')
                            # 判断启动时间晚于夏令时，且在30分钟内，则处于夏令时
                            elif (starttime - stime).seconds / 60 <= 30:
                                starttime += timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')

                            list_split[1] = ",".join(split_result)
                            f2.write(";".join(list_split))
                            continue
                        else:
                            f2.write(i)
                            continue
                    else:
                        f2.write(i)
                f2.close()
            print(path +" 路径下的周自启动已调整")
    except Exception as alert:
        print(alert)

def modify_config_winter(paths):
    try:
        for path in paths:
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "StartStopTool.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="App.*" value="(.*.exe)" />', i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            if split_result[1] == '1':
                                time = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                                # 如果遇到易盛一级，则直接修改
                                if 'EsunnyMarket' in list_split[3]:
                                    time -= timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                # 如果设置时间大于等于6:00，小于6：30，说明此时是冬令时，则触发修改至夏令时
                                if (time-stime).days==0 and 30 <= (time-stime).seconds/60 < 60:
                                    time -= timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                #如果设置时间大于等于6:30小于7:00,说明此时是冬令时，则触发修改至夏令时
                                elif (time-stime).days==0 and 60 <= (time-stime).seconds/60 < 90:
                                    time -= timedelta(hours=1)
                                    split_result[2] = time.strftime('%H:%M:%S')
                                    list_split[1] = ",".join(split_result)
                                    f2.write(";".join(list_split))
                                    continue
                                else:
                                    f2.write(i)
                                    continue

                            else:
                                f2.write(i)
                                continue
                        else:
                            f2.write(i)
                            continue
                    elif re.search(r'<add key="DayApp.*" value="(.*.exe)" />',i):
                        # 匹配设置生效状态的配置
                        if 'ON' in i:
                            list_split = i.split(';')
                            split_result = list_split[1].split(',')
                            endtime=datetime.datetime.strptime(split_result[1], '%H:%M:%S')
                            starttime = datetime.datetime.strptime(split_result[2], '%H:%M:%S')
                            # 如果遇到易盛一级，则直接修改
                            if 'EsunnyMarket' in list_split[3]:
                                endtime -= timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                                starttime -= timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')
                                list_split[1] = ",".join(split_result)
                                f2.write(";".join(list_split))
                                continue
                            #判断关闭时间晚于6点，早上6点半，处于冬令时
                            if (endtime-stime).days==0 and 30< (endtime-stime).seconds/60 <60:
                                endtime -= timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')
                            #判断关闭时间晚于6点半，早于7点，处于冬令时
                            elif (endtime-stime).days==0 and 60< (endtime-stime).seconds/60 <90:
                                endtime -= timedelta(hours=1)
                                split_result[1] = endtime.strftime('%H:%M:%S')

                            #判断启动时间晚于6点，早上6点半，处于冬令时
                            if (starttime-stime).days==0 and 30< (starttime-stime).seconds/60 <60:
                                starttime -= timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')
                            #判断启动时间晚于6点半，早于7点，处于冬令时
                            elif (starttime-stime).days==0 and 60< (starttime-stime).seconds/60 <90:
                                starttime -= timedelta(hours=1)
                                split_result[2] = starttime.strftime('%H:%M:%S')

                            list_split[1] = ",".join(split_result)
                            f2.write(";".join(list_split))
                            continue
                        else:
                            f2.write(i)
                            continue
                    else:
                        f2.write(i)
                f2.close()
            print(path +" 路径下的周自启动已调整")
    except Exception as alert:
        print(alert)

def Market_summer(paths):
    try:
        for path in paths:
            with open(path + "\\" + "ZDMarketDispatcher.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "ZDMarketDispatcher.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="BeforeStockOpenTime".* />', i):
                        split_list=i.split(';')
                        time_split=split_list[1].split(',')
                        old_time=datetime.datetime.strptime(time_split[2], '%H:%M:%S')
                        new_time=old_time+timedelta(hours=1)
                        time_split[2]=new_time.strftime('%H:%M:%S')
                        split_list[1]=(',').join(time_split)
                        f2.write((';').join(split_list))
                    else:
                        f2.write(i)

    except Exception as alert:
        print(alert)

def Market_winter(paths):
    try:
        for path in paths:
            with open(path + "\\" + "ZDMarketDispatcher.exe.config", 'r+', encoding='utf8') as f1:
                t_text = f1.readlines()
                f1.seek(0)
                f1.truncate()
                f1.close()
            with open(path + "\\" + "ZDMarketDispatcher.exe.config", 'r+', encoding='utf8') as f2:
                for i in t_text:
                    # 匹配周启动的具体配置
                    if re.search(r'<add key="BeforeStockOpenTime".* />', i):
                        split_list=i.split(';')
                        time_split=split_list[1].split(',')
                        old_time=datetime.datetime.strptime(time_split[2], '%H:%M:%S')
                        new_time=old_time-timedelta(hours=1)
                        time_split[2]=new_time.strftime('%H:%M:%S')
                        split_list[1]=(',').join(time_split)
                        f2.write((';').join(split_list))
                    else:
                        f2.write(i)

    except Exception as alert:
        print(alert)



if __name__ == '__main__':
    stime = datetime.datetime.strptime(summertime, '%H:%M:%S')
    wtime = datetime.datetime.strptime(wintertime, '%H:%M:%S')
    get_proc(targetProcess)
    #更新自启动
    if diction['StartStopTool']:
        if len(sys.argv)>1:
            if sys.argv[1].lower() == 'summer':
                modify_config_summer(diction['StartStopTool'])
                print("自启动 夏令时至冬令时 调整完成")
            elif sys.argv[1].lower() == 'winter':
                modify_config_winter(diction['StartStopTool'])
                print("自启动 冬令时至夏令时 调整完成")
            os.system('taskkill /F /IM StartStopTool.exe')
            print("自启动已关闭")
            time.sleep(3)
            start_process(diction['StartStopTool'])
        else:
            print ("Error:参数错误，请重新执行")



    #更新股票二级行情
    if diction['ZDMarketDispatcher']:
        if len(sys.argv)>1:
            if sys.argv[1] == 'summer':
                Market_summer(diction['ZDMarketDispatcher'])
                print("股票二级行情 夏令时至冬令时 调整完成")
            elif sys.argv[1] == 'winter':
                Market_winter(diction['ZDMarketDispatcher'])
                print("股票二级行情 冬令时至夏令时 调整完成")
        else:
            print ("Stock Error:参数错误，请重新执行")







