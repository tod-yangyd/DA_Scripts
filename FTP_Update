# -*- coding: utf-8 -*-
import os
import psutil
from datetime import datetime
from ftplib import FTP
import shutil

TargetPro = "CMEMarketAdapter"
FtpTargetFile = "CME_Market"
config={'StatisticsDataResetTime':'<add key="StatisticsDataResetTime" value="" />'}
TargetDirs = []
targetFile = "channel"
Path = []
File = []


def scan_dir(targetdir):
    """
    用于读取出所有的channel相应路径
    :param targetdir:channel所在的文件路径
    :return:返回所有的channel路径到变量列表Path内
    """
    for dir in targetdir:
        os.chdir(dir)
        for newroot, newdirs, newfiles in os.walk(dir, topdown=False):
            for newname in newfiles:
                if newname == TargetPro:
                    Path.append(newroot)


def get_proc(pname,list):
    templist=[]
    for proc in psutil.process_iter():
        try:
            if proc.name().lower().__contains__(pname.lower()):
                templist.append(proc.cwd())
        except psutil.AccessDenied:
            pass
        except psutil.NoSuchProcess:
            pass
    for dir in templist:
        if dir.lower().__contains__(targetFile):
            list.append(dir)

def update_file(dirs,ftpfile):
    ftp.cwd(ftpfile)
    for dir in dirs:
        try:
            os.chdir(dir)
            bak_path = dir + os.sep + 'old' + os.sep + datetime.now().strftime('%Y%m%d') + os.sep
            if not os.path.exists(bak_path):
                os.makedirs(bak_path)
            if config is not None:
                update_config(dir)
            for file in ftp.nlst():
                if os.path.isdir(file):
                    pass
                else:
                    try:
                        file_move(dir, bak_path, file)
                        file_download(dir, file)
                    except IOError:
                        print("{path1} 下的 {file1} 文件更新失败".format(path1=dir, file1=file))
            print("{} 程序已更新".format(dir))
        except:
            print("{} 程序更新失败".format(dir))
    print("All Done~")



def file_move(target_path,bak_path,file):
    try:
        shutil.move(target_path + os.sep + file, bak_path + file)
    except FileNotFoundError:
            print('old {} not found'.format(file))


def file_download(target_path,file):
    try:
        with open(target_path + '\\' + file, 'wb') as f:
            filename = 'RETR ' + file
            ftp.retrbinary(filename, f.write)
    except IOError:
        print("Error:对 {} 下的程序文件更新失败，请调查 ".format(target_path))


def update_config(dir):
    try:
        with open(dir + "\\" + TargetPro + ".exe.config", 'r+', encoding='utf8') as f1:
            t_text = f1.readlines()
            f1.seek(0)
            f1.truncate()
            f1.close()
        with open(dir + "\\" + TargetPro + ".exe.config", 'r+', encoding='utf8') as f2:
            for key in config.keys():
                for strs in t_text:
                    if strs.__contains__(key):
                        f2.write(config[key]+"\n")
                    else:
                        f2.write(strs)
            print("{} 配置文件更新完成".format(dir))
    except Exception as inst:
        print(inst)
        print("{} 配置更新失败".format(dir))


ftp = FTP('30.0.0.2')
ftp.login('deploy','deploy!@#456')
print(ftp.getwelcome())
get_proc(TargetPro+".exe",TargetDirs)
ftp.cwd('deploy')
update_file(TargetDirs,FtpTargetFile)
ftp.quit()

